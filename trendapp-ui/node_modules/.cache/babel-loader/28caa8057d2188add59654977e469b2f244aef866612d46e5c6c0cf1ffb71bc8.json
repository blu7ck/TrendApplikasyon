{"ast":null,"code":"export const fetchRedditData = async () => {\n  const response = await fetch(\"https://www.reddit.com/r/popular/top.json?limit=10\");\n  const data = await response.json();\n  return data.data.children.map(post => ({\n    title: post.data.title,\n    url: post.data.url,\n    thumbnail: post.data.thumbnail !== \"self\" ? post.data.thumbnail : null\n  }));\n};\nexport const fetchTwitterData = async () => {\n  const response = await fetch(\"API_URL_TWITTER\");\n  const data = await response.json();\n  return data.map(tweet => ({\n    title: tweet.text,\n    url: `https://twitter.com/user/status/${tweet.id}`,\n    thumbnail: tweet.media ? tweet.media[0].url : null\n  }));\n};\nexport const fetchYouTubeData = async () => {\n  try {\n    const response = await fetch(\"http://localhost:8080/api/youtube/trends\");\n    console.log(\"📡 API Yanıtı:\", response); // Yanıtı kontrol edelim\n\n    if (!response.ok) {\n      throw new Error(`HTTP Hatası! Durum Kodu: ${response.status}`);\n    }\n    const data = await response.text(); // İlk olarak düz TEXT al\n    console.log(\"📡 API TEXT Yanıtı:\", data); // JSON olup olmadığını görmek için yazdır\n\n    try {\n      const jsonData = JSON.parse(data); // JSON olarak parse etmeye çalış\n      return jsonData.map(video => ({\n        title: video.title,\n        url: video.url,\n        thumbnail: video.thumbnail || \"\" // Eğer küçük resim yoksa hata vermesin\n      }));\n    } catch (jsonError) {\n      console.error(\"❌ API Yanıtı JSON değil, gelen veri:\", data);\n      return [];\n    }\n  } catch (error) {\n    console.error(\"❌ YouTube verileri çekilemedi:\", error);\n    return [];\n  }\n};\nexport const fetchInstagramData = async () => {\n  const response = await fetch(\"API_URL_INSTAGRAM\");\n  const data = await response.json();\n  return data.map(post => ({\n    title: post.caption,\n    url: post.permalink,\n    thumbnail: post.media_url\n  }));\n};","map":{"version":3,"names":["fetchRedditData","response","fetch","data","json","children","map","post","title","url","thumbnail","fetchTwitterData","tweet","text","id","media","fetchYouTubeData","console","log","ok","Error","status","jsonData","JSON","parse","video","jsonError","error","fetchInstagramData","caption","permalink","media_url"],"sources":["C:/Users/blu4c/OneDrive/Desktop/blu4ck/IntelliJ/stuff/trendappv01/trendapp-ui/src/api.js"],"sourcesContent":["export const fetchRedditData = async () => {\r\n    const response = await fetch(\"https://www.reddit.com/r/popular/top.json?limit=10\");\r\n    const data = await response.json();\r\n    return data.data.children.map(post => ({\r\n        title: post.data.title,\r\n        url: post.data.url,\r\n        thumbnail: post.data.thumbnail !== \"self\" ? post.data.thumbnail : null\r\n    }));\r\n};\r\n\r\n\r\nexport const fetchTwitterData = async () => {\r\n    const response = await fetch(\"API_URL_TWITTER\");\r\n    const data = await response.json();\r\n    return data.map(tweet => ({\r\n        title: tweet.text,\r\n        url: `https://twitter.com/user/status/${tweet.id}`,\r\n        thumbnail: tweet.media ? tweet.media[0].url : null\r\n    }));\r\n};\r\n\r\nexport const fetchYouTubeData = async () => {\r\n    try {\r\n        const response = await fetch(\"http://localhost:8080/api/youtube/trends\");\r\n\r\n        console.log(\"📡 API Yanıtı:\", response); // Yanıtı kontrol edelim\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP Hatası! Durum Kodu: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.text();  // İlk olarak düz TEXT al\r\n        console.log(\"📡 API TEXT Yanıtı:\", data); // JSON olup olmadığını görmek için yazdır\r\n\r\n        try {\r\n            const jsonData = JSON.parse(data);  // JSON olarak parse etmeye çalış\r\n            return jsonData.map(video => ({\r\n                title: video.title,\r\n                url: video.url,\r\n                thumbnail: video.thumbnail || \"\"  // Eğer küçük resim yoksa hata vermesin\r\n            }));\r\n        } catch (jsonError) {\r\n            console.error(\"❌ API Yanıtı JSON değil, gelen veri:\", data);\r\n            return [];\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(\"❌ YouTube verileri çekilemedi:\", error);\r\n        return [];\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const fetchInstagramData = async () => {\r\n    const response = await fetch(\"API_URL_INSTAGRAM\");\r\n    const data = await response.json();\r\n    return data.map(post => ({\r\n        title: post.caption,\r\n        url: post.permalink,\r\n        thumbnail: post.media_url\r\n    }));\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}