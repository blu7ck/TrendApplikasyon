{"ast":null,"code":"export const fetchRedditData = async () => {\n  const response = await fetch(\"https://www.reddit.com/r/popular/top.json?limit=10\");\n  const data = await response.json();\n  return data.data.children.map(post => ({\n    title: post.data.title,\n    url: post.data.url,\n    thumbnail: post.data.thumbnail !== \"self\" ? post.data.thumbnail : null\n  }));\n};\nexport const fetchTwitterData = async () => {\n  const response = await fetch(\"API_URL_TWITTER\");\n  const data = await response.json();\n  return data.map(tweet => ({\n    title: tweet.text,\n    url: `https://twitter.com/user/status/${tweet.id}`,\n    thumbnail: tweet.media ? tweet.media[0].url : null\n  }));\n};\nexport const fetchYouTubeData = async () => {\n  try {\n    const response = await fetch(\"http://localhost:8080/api/youtube/trends\");\n\n    // Yanıtın JSON olup olmadığını test edelim\n    const textData = await response.text();\n    console.log(\"API Yanıtı (Raw):\", textData);\n\n    // JSON parse işlemini burada deneyelim\n    const data = JSON.parse(textData);\n    if (!data || !Array.isArray(data)) {\n      throw new Error(\"Beklenen formatta veri alınamadı!\");\n    }\n    return data.map(item => ({\n      title: item.title,\n      url: item.url,\n      thumbnail: item.thumbnail || \"\"\n    }));\n  } catch (error) {\n    console.error(\"YouTube verileri çekilemedi!\", error);\n    return [];\n  }\n};\nexport const fetchInstagramData = async () => {\n  const response = await fetch(\"API_URL_INSTAGRAM\");\n  const data = await response.json();\n  return data.map(post => ({\n    title: post.caption,\n    url: post.permalink,\n    thumbnail: post.media_url\n  }));\n};","map":{"version":3,"names":["fetchRedditData","response","fetch","data","json","children","map","post","title","url","thumbnail","fetchTwitterData","tweet","text","id","media","fetchYouTubeData","textData","console","log","JSON","parse","Array","isArray","Error","item","error","fetchInstagramData","caption","permalink","media_url"],"sources":["C:/Users/blu4c/OneDrive/Desktop/blu4ck/IntelliJ/stuff/trendappv01/trendapp-ui/src/api.js"],"sourcesContent":["export const fetchRedditData = async () => {\r\n    const response = await fetch(\"https://www.reddit.com/r/popular/top.json?limit=10\");\r\n    const data = await response.json();\r\n    return data.data.children.map(post => ({\r\n        title: post.data.title,\r\n        url: post.data.url,\r\n        thumbnail: post.data.thumbnail !== \"self\" ? post.data.thumbnail : null\r\n    }));\r\n};\r\n\r\n\r\nexport const fetchTwitterData = async () => {\r\n    const response = await fetch(\"API_URL_TWITTER\");\r\n    const data = await response.json();\r\n    return data.map(tweet => ({\r\n        title: tweet.text,\r\n        url: `https://twitter.com/user/status/${tweet.id}`,\r\n        thumbnail: tweet.media ? tweet.media[0].url : null\r\n    }));\r\n};\r\n\r\nexport const fetchYouTubeData = async () => {\r\n    try {\r\n        const response = await fetch(\"http://localhost:8080/api/youtube/trends\");\r\n\r\n        // Yanıtın JSON olup olmadığını test edelim\r\n        const textData = await response.text();\r\n        console.log(\"API Yanıtı (Raw):\", textData);\r\n\r\n        // JSON parse işlemini burada deneyelim\r\n        const data = JSON.parse(textData);\r\n\r\n        if (!data || !Array.isArray(data)) {\r\n            throw new Error(\"Beklenen formatta veri alınamadı!\");\r\n        }\r\n\r\n        return data.map(item => ({\r\n            title: item.title,\r\n            url: item.url,\r\n            thumbnail: item.thumbnail || \"\"\r\n        }));\r\n    } catch (error) {\r\n        console.error(\"YouTube verileri çekilemedi!\", error);\r\n        return [];\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const fetchInstagramData = async () => {\r\n    const response = await fetch(\"API_URL_INSTAGRAM\");\r\n    const data = await response.json();\r\n    return data.map(post => ({\r\n        title: post.caption,\r\n        url: post.permalink,\r\n        thumbnail: post.media_url\r\n    }));\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oDAAoD,CAAC;EAClF,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACA,IAAI,CAACE,QAAQ,CAACC,GAAG,CAACC,IAAI,KAAK;IACnCC,KAAK,EAAED,IAAI,CAACJ,IAAI,CAACK,KAAK;IACtBC,GAAG,EAAEF,IAAI,CAACJ,IAAI,CAACM,GAAG;IAClBC,SAAS,EAAEH,IAAI,CAACJ,IAAI,CAACO,SAAS,KAAK,MAAM,GAAGH,IAAI,CAACJ,IAAI,CAACO,SAAS,GAAG;EACtE,CAAC,CAAC,CAAC;AACP,CAAC;AAGD,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,CAAC;EAC/C,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACG,GAAG,CAACM,KAAK,KAAK;IACtBJ,KAAK,EAAEI,KAAK,CAACC,IAAI;IACjBJ,GAAG,EAAE,mCAAmCG,KAAK,CAACE,EAAE,EAAE;IAClDJ,SAAS,EAAEE,KAAK,CAACG,KAAK,GAAGH,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAACN,GAAG,GAAG;EAClD,CAAC,CAAC,CAAC;AACP,CAAC;AAED,OAAO,MAAMO,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACA,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,CAAC;;IAExE;IACA,MAAMe,QAAQ,GAAG,MAAMhB,QAAQ,CAACY,IAAI,CAAC,CAAC;IACtCK,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,QAAQ,CAAC;;IAE1C;IACA,MAAMd,IAAI,GAAGiB,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAAC;IAEjC,IAAI,CAACd,IAAI,IAAI,CAACmB,KAAK,CAACC,OAAO,CAACpB,IAAI,CAAC,EAAE;MAC/B,MAAM,IAAIqB,KAAK,CAAC,mCAAmC,CAAC;IACxD;IAEA,OAAOrB,IAAI,CAACG,GAAG,CAACmB,IAAI,KAAK;MACrBjB,KAAK,EAAEiB,IAAI,CAACjB,KAAK;MACjBC,GAAG,EAAEgB,IAAI,CAAChB,GAAG;MACbC,SAAS,EAAEe,IAAI,CAACf,SAAS,IAAI;IACjC,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACZR,OAAO,CAACQ,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,EAAE;EACb;AACJ,CAAC;AAYD,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC1C,MAAM1B,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmB,CAAC;EACjD,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACG,GAAG,CAACC,IAAI,KAAK;IACrBC,KAAK,EAAED,IAAI,CAACqB,OAAO;IACnBnB,GAAG,EAAEF,IAAI,CAACsB,SAAS;IACnBnB,SAAS,EAAEH,IAAI,CAACuB;EACpB,CAAC,CAAC,CAAC;AACP,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}