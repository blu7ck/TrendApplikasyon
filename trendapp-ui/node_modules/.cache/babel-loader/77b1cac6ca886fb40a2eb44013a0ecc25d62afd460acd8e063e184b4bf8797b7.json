{"ast":null,"code":"export const fetchRedditData = async () => {\n  const response = await fetch(\"http://localhost:8080/api/reddit/top\");\n  const data = await response.json();\n  console.log(\"Backend'den gelen veri:\", data);\n  return data.map(post => ({\n    title: post.title,\n    url: post.url,\n    thumbnail: post.thumbnail ? post.thumbnail : null\n  }));\n};\n\n// export const fetchTwitterData = async () => {\n//     const response = await fetch(\"API_URL_TWITTER\");\n//     const data = await response.json();\n//     return data.map(tweet => ({\n//         title: tweet.text,\n//         url: `https://twitter.com/user/status/${tweet.id}`,\n//         thumbnail: tweet.media ? tweet.media[0].url : null\n//     }));\n// };\n\nexport const fetchYouTubeData = async () => {\n  try {\n    console.log(\"YouTube verisi çekiliyor...\");\n    const response = await fetch(\"http://localhost:8080/api/youtube/trends\");\n\n    // 1️⃣ HTTP Yanıt Kontrolü (200 değilse hata fırlat)\n    if (!response.ok) {\n      throw new Error(`HTTP hata! Durum kodu: ${response.status}`);\n    }\n\n    // 2️⃣ Yanıtın JSON olup olmadığını kontrol et\n    const contentType = response.headers.get(\"content-type\");\n    if (!contentType || !contentType.includes(\"application/json\")) {\n      throw new Error(\"Sunucudan JSON formatında veri gelmiyor!\");\n    }\n\n    // 3️⃣ JSON Parse İşlemi\n    const data = await response.json();\n    console.log(\"YouTube API Yanıtı:\", data);\n\n    // 4️⃣ Beklenen formatı doğrula\n    if (!Array.isArray(data)) {\n      throw new Error(\"Beklenmeyen veri formatı! API'den gelen veri array değil.\");\n    }\n    return data.map(video => ({\n      title: video.title,\n      url: video.url,\n      thumbnail: video.thumbnail || \"\"\n    }));\n  } catch (error) {\n    console.error(\"YouTube API Hatası:\", error);\n    return [];\n  }\n};\n\n// export const fetchInstagramData = async () => {\n//     const response = await fetch(\"API_URL_INSTAGRAM\");\n//     const data = await response.json();\n//     return data.map(post => ({\n//         title: post.caption,\n//         url: post.permalink,\n//         thumbnail: post.media_url\n//     }));\n// };","map":{"version":3,"names":["fetchRedditData","response","fetch","data","json","console","log","map","post","title","url","thumbnail","fetchYouTubeData","ok","Error","status","contentType","headers","get","includes","Array","isArray","video","error"],"sources":["C:/Users/blu4c/OneDrive/Desktop/blu4ck/IntelliJ/stuff/TrendApplikasyon/trendapp-ui/src/api.js"],"sourcesContent":["export const fetchRedditData = async () => {\r\n    const response = await fetch(\"http://localhost:8080/api/reddit/top\");\r\n    const data = await response.json();\r\n    console.log(\"Backend'den gelen veri:\", data); \r\n\r\n    return data.map(post => ({\r\n        title: post.title,\r\n        url: post.url,\r\n        thumbnail: post.thumbnail ? post.thumbnail : null\r\n    }));\r\n};\r\n\r\n\r\n\r\n// export const fetchTwitterData = async () => {\r\n//     const response = await fetch(\"API_URL_TWITTER\");\r\n//     const data = await response.json();\r\n//     return data.map(tweet => ({\r\n//         title: tweet.text,\r\n//         url: `https://twitter.com/user/status/${tweet.id}`,\r\n//         thumbnail: tweet.media ? tweet.media[0].url : null\r\n//     }));\r\n// };\r\n\r\nexport const fetchYouTubeData = async () => {\r\n    try {\r\n        console.log(\"YouTube verisi çekiliyor...\");\r\n\r\n        const response = await fetch(\"http://localhost:8080/api/youtube/trends\");\r\n\r\n        // 1️⃣ HTTP Yanıt Kontrolü (200 değilse hata fırlat)\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP hata! Durum kodu: ${response.status}`);\r\n        }\r\n\r\n        // 2️⃣ Yanıtın JSON olup olmadığını kontrol et\r\n        const contentType = response.headers.get(\"content-type\");\r\n        if (!contentType || !contentType.includes(\"application/json\")) {\r\n            throw new Error(\"Sunucudan JSON formatında veri gelmiyor!\");\r\n        }\r\n\r\n        // 3️⃣ JSON Parse İşlemi\r\n        const data = await response.json();\r\n        console.log(\"YouTube API Yanıtı:\", data);\r\n\r\n        // 4️⃣ Beklenen formatı doğrula\r\n        if (!Array.isArray(data)) {\r\n            throw new Error(\"Beklenmeyen veri formatı! API'den gelen veri array değil.\");\r\n        }\r\n\r\n        return data.map(video => ({\r\n            title: video.title,\r\n            url: video.url,\r\n            thumbnail: video.thumbnail || \"\",\r\n        }));\r\n\r\n    } catch (error) {\r\n        console.error(\"YouTube API Hatası:\", error);\r\n        return [];\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const fetchInstagramData = async () => {\r\n//     const response = await fetch(\"API_URL_INSTAGRAM\");\r\n//     const data = await response.json();\r\n//     return data.map(post => ({\r\n//         title: post.caption,\r\n//         url: post.permalink,\r\n//         thumbnail: post.media_url\r\n//     }));\r\n// };\r\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,CAAC;EACpE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClCC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEH,IAAI,CAAC;EAE5C,OAAOA,IAAI,CAACI,GAAG,CAACC,IAAI,KAAK;IACrBC,KAAK,EAAED,IAAI,CAACC,KAAK;IACjBC,GAAG,EAAEF,IAAI,CAACE,GAAG;IACbC,SAAS,EAAEH,IAAI,CAACG,SAAS,GAAGH,IAAI,CAACG,SAAS,GAAG;EACjD,CAAC,CAAC,CAAC;AACP,CAAC;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACAP,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAE1C,MAAML,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,CAAC;;IAExE;IACA,IAAI,CAACD,QAAQ,CAACY,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,0BAA0Bb,QAAQ,CAACc,MAAM,EAAE,CAAC;IAChE;;IAEA;IACA,MAAMC,WAAW,GAAGf,QAAQ,CAACgB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IACxD,IAAI,CAACF,WAAW,IAAI,CAACA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC3D,MAAM,IAAIL,KAAK,CAAC,0CAA0C,CAAC;IAC/D;;IAEA;IACA,MAAMX,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEH,IAAI,CAAC;;IAExC;IACA,IAAI,CAACiB,KAAK,CAACC,OAAO,CAAClB,IAAI,CAAC,EAAE;MACtB,MAAM,IAAIW,KAAK,CAAC,2DAA2D,CAAC;IAChF;IAEA,OAAOX,IAAI,CAACI,GAAG,CAACe,KAAK,KAAK;MACtBb,KAAK,EAAEa,KAAK,CAACb,KAAK;MAClBC,GAAG,EAAEY,KAAK,CAACZ,GAAG;MACdC,SAAS,EAAEW,KAAK,CAACX,SAAS,IAAI;IAClC,CAAC,CAAC,CAAC;EAEP,CAAC,CAAC,OAAOY,KAAK,EAAE;IACZlB,OAAO,CAACkB,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,OAAO,EAAE;EACb;AACJ,CAAC;;AAiBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}