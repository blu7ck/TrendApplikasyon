{"ast":null,"code":"export const fetchRedditData = async () => {\n  const response = await fetch(\"https://www.reddit.com/r/popular/top.json?limit=10\");\n  const data = await response.json();\n  return data.data.children.map(post => ({\n    title: post.data.title,\n    url: post.data.url,\n    thumbnail: post.data.thumbnail !== \"self\" ? post.data.thumbnail : null\n  }));\n};\nexport const fetchTwitterData = async () => {\n  const response = await fetch(\"API_URL_TWITTER\");\n  const data = await response.json();\n  return data.map(tweet => ({\n    title: tweet.text,\n    url: `https://twitter.com/user/status/${tweet.id}`,\n    thumbnail: tweet.media ? tweet.media[0].url : null\n  }));\n};\nexport const fetchYouTubeData = async () => {\n  try {\n    const response = await fetch(\"http://localhost:8080/api/youtube/trends\"); // Corrected API endpoint\n    if (!response.ok) throw new Error(\"YouTube API isteği başarısız\");\n    const data = await response.json();\n    console.log(\"YouTube API Yanıtı:\", data);\n    if (!data.items) {\n      console.error(\"YouTube verileri eksik veya yanlış!\", data);\n      return [];\n    }\n    return data.items.map(item => {\n      var _item$snippet$thumbna, _item$snippet$thumbna2;\n      return {\n        title: item.snippet.title,\n        url: `https://www.youtube.com/watch?v=${item.id.videoId}`,\n        thumbnail: ((_item$snippet$thumbna = item.snippet.thumbnails) === null || _item$snippet$thumbna === void 0 ? void 0 : (_item$snippet$thumbna2 = _item$snippet$thumbna.medium) === null || _item$snippet$thumbna2 === void 0 ? void 0 : _item$snippet$thumbna2.url) || \"\"\n      };\n    });\n  } catch (error) {\n    console.error(\"YouTube API Hatası:\", error);\n    return [];\n  }\n};\nexport const fetchInstagramData = async () => {\n  const response = await fetch(\"API_URL_INSTAGRAM\");\n  const data = await response.json();\n  return data.map(post => ({\n    title: post.caption,\n    url: post.permalink,\n    thumbnail: post.media_url\n  }));\n};","map":{"version":3,"names":["fetchRedditData","response","fetch","data","json","children","map","post","title","url","thumbnail","fetchTwitterData","tweet","text","id","media","fetchYouTubeData","ok","Error","console","log","items","error","item","_item$snippet$thumbna","_item$snippet$thumbna2","snippet","videoId","thumbnails","medium","fetchInstagramData","caption","permalink","media_url"],"sources":["C:/Users/blu4c/OneDrive/Desktop/blu4ck/IntelliJ/stuff/trendappv01/trendapp-ui/src/api.js"],"sourcesContent":["export const fetchRedditData = async () => {\r\n    const response = await fetch(\"https://www.reddit.com/r/popular/top.json?limit=10\");\r\n    const data = await response.json();\r\n    return data.data.children.map(post => ({\r\n        title: post.data.title,\r\n        url: post.data.url,\r\n        thumbnail: post.data.thumbnail !== \"self\" ? post.data.thumbnail : null\r\n    }));\r\n};\r\n\r\n\r\nexport const fetchTwitterData = async () => {\r\n    const response = await fetch(\"API_URL_TWITTER\");\r\n    const data = await response.json();\r\n    return data.map(tweet => ({\r\n        title: tweet.text,\r\n        url: `https://twitter.com/user/status/${tweet.id}`,\r\n        thumbnail: tweet.media ? tweet.media[0].url : null\r\n    }));\r\n};\r\n\r\nexport const fetchYouTubeData = async () => {\r\n    try {\r\n        const response = await fetch(\"http://localhost:8080/api/youtube/trends\"); // Corrected API endpoint\r\n        if (!response.ok) throw new Error(\"YouTube API isteği başarısız\");\r\n\r\n        const data = await response.json();\r\n        console.log(\"YouTube API Yanıtı:\", data);\r\n\r\n        if (!data.items) {\r\n            console.error(\"YouTube verileri eksik veya yanlış!\", data);\r\n            return [];\r\n        }\r\n\r\n        return data.items.map((item) => ({\r\n            title: item.snippet.title,\r\n            url: `https://www.youtube.com/watch?v=${item.id.videoId}`,\r\n            thumbnail: item.snippet.thumbnails?.medium?.url || \"\"\r\n        }));\r\n    } catch (error) {\r\n        console.error(\"YouTube API Hatası:\", error);\r\n        return [];\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nexport const fetchInstagramData = async () => {\r\n    const response = await fetch(\"API_URL_INSTAGRAM\");\r\n    const data = await response.json();\r\n    return data.map(post => ({\r\n        title: post.caption,\r\n        url: post.permalink,\r\n        thumbnail: post.media_url\r\n    }));\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oDAAoD,CAAC;EAClF,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACA,IAAI,CAACE,QAAQ,CAACC,GAAG,CAACC,IAAI,KAAK;IACnCC,KAAK,EAAED,IAAI,CAACJ,IAAI,CAACK,KAAK;IACtBC,GAAG,EAAEF,IAAI,CAACJ,IAAI,CAACM,GAAG;IAClBC,SAAS,EAAEH,IAAI,CAACJ,IAAI,CAACO,SAAS,KAAK,MAAM,GAAGH,IAAI,CAACJ,IAAI,CAACO,SAAS,GAAG;EACtE,CAAC,CAAC,CAAC;AACP,CAAC;AAGD,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,CAAC;EAC/C,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACG,GAAG,CAACM,KAAK,KAAK;IACtBJ,KAAK,EAAEI,KAAK,CAACC,IAAI;IACjBJ,GAAG,EAAE,mCAAmCG,KAAK,CAACE,EAAE,EAAE;IAClDJ,SAAS,EAAEE,KAAK,CAACG,KAAK,GAAGH,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAACN,GAAG,GAAG;EAClD,CAAC,CAAC,CAAC;AACP,CAAC;AAED,OAAO,MAAMO,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACA,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,CAAC,CAAC,CAAC;IAC1E,IAAI,CAACD,QAAQ,CAACgB,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IAEjE,MAAMf,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClCe,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEjB,IAAI,CAAC;IAExC,IAAI,CAACA,IAAI,CAACkB,KAAK,EAAE;MACbF,OAAO,CAACG,KAAK,CAAC,qCAAqC,EAAEnB,IAAI,CAAC;MAC1D,OAAO,EAAE;IACb;IAEA,OAAOA,IAAI,CAACkB,KAAK,CAACf,GAAG,CAAEiB,IAAI;MAAA,IAAAC,qBAAA,EAAAC,sBAAA;MAAA,OAAM;QAC7BjB,KAAK,EAAEe,IAAI,CAACG,OAAO,CAAClB,KAAK;QACzBC,GAAG,EAAE,mCAAmCc,IAAI,CAACT,EAAE,CAACa,OAAO,EAAE;QACzDjB,SAAS,EAAE,EAAAc,qBAAA,GAAAD,IAAI,CAACG,OAAO,CAACE,UAAU,cAAAJ,qBAAA,wBAAAC,sBAAA,GAAvBD,qBAAA,CAAyBK,MAAM,cAAAJ,sBAAA,uBAA/BA,sBAAA,CAAiChB,GAAG,KAAI;MACvD,CAAC;IAAA,CAAC,CAAC;EACP,CAAC,CAAC,OAAOa,KAAK,EAAE;IACZH,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,OAAO,EAAE;EACb;AACJ,CAAC;AAKD,OAAO,MAAMQ,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC1C,MAAM7B,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmB,CAAC;EACjD,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACG,GAAG,CAACC,IAAI,KAAK;IACrBC,KAAK,EAAED,IAAI,CAACwB,OAAO;IACnBtB,GAAG,EAAEF,IAAI,CAACyB,SAAS;IACnBtB,SAAS,EAAEH,IAAI,CAAC0B;EACpB,CAAC,CAAC,CAAC;AACP,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}