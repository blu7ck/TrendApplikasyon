{"ast":null,"code":"export const fetchRedditData = async () => {\n  const response = await fetch(\"https://www.reddit.com/r/popular/top.json?limit=10\");\n  const data = await response.json();\n  return data.data.children.map(post => ({\n    title: post.data.title,\n    url: post.data.url,\n    thumbnail: post.data.thumbnail !== \"self\" ? post.data.thumbnail : null\n  }));\n};\nexport const fetchTwitterData = async () => {\n  const response = await fetch(\"API_URL_TWITTER\");\n  const data = await response.json();\n  return data.map(tweet => ({\n    title: tweet.text,\n    url: `https://twitter.com/user/status/${tweet.id}`,\n    thumbnail: tweet.media ? tweet.media[0].url : null\n  }));\n};\nexport const fetchYouTubeData = async () => {\n  try {\n    const response = await fetch(\"http://localhost:8080/api/youtube/trends\");\n\n    // Yanıtın JSON olup olmadığını kontrol et\n    const text = await response.text();\n    console.log(\"YouTube API Yanıtı (ham veri):\", text);\n    const data = JSON.parse(text); // JSON'a çevir\n    console.log(\"YouTube API Yanıtı (JSON):\", data);\n    if (!Array.isArray(data)) {\n      console.error(\"YouTube verileri eksik veya yanlış formatta!\", data);\n      return [];\n    }\n    return data.map(item => ({\n      title: item.title,\n      url: item.url,\n      thumbnail: item.thumbnail || \"\"\n    }));\n  } catch (error) {\n    console.error(\"YouTube API Hatası:\", error);\n    return [];\n  }\n};\nexport const fetchInstagramData = async () => {\n  const response = await fetch(\"API_URL_INSTAGRAM\");\n  const data = await response.json();\n  return data.map(post => ({\n    title: post.caption,\n    url: post.permalink,\n    thumbnail: post.media_url\n  }));\n};","map":{"version":3,"names":["fetchRedditData","response","fetch","data","json","children","map","post","title","url","thumbnail","fetchTwitterData","tweet","text","id","media","fetchYouTubeData","console","log","JSON","parse","Array","isArray","error","item","fetchInstagramData","caption","permalink","media_url"],"sources":["C:/Users/blu4c/OneDrive/Desktop/blu4ck/IntelliJ/stuff/trendappv01/trendapp-ui/src/api.js"],"sourcesContent":["export const fetchRedditData = async () => {\r\n    const response = await fetch(\"https://www.reddit.com/r/popular/top.json?limit=10\");\r\n    const data = await response.json();\r\n    return data.data.children.map(post => ({\r\n        title: post.data.title,\r\n        url: post.data.url,\r\n        thumbnail: post.data.thumbnail !== \"self\" ? post.data.thumbnail : null\r\n    }));\r\n};\r\n\r\n\r\nexport const fetchTwitterData = async () => {\r\n    const response = await fetch(\"API_URL_TWITTER\");\r\n    const data = await response.json();\r\n    return data.map(tweet => ({\r\n        title: tweet.text,\r\n        url: `https://twitter.com/user/status/${tweet.id}`,\r\n        thumbnail: tweet.media ? tweet.media[0].url : null\r\n    }));\r\n};\r\n\r\nexport const fetchYouTubeData = async () => {\r\n    try {\r\n        const response = await fetch(\"http://localhost:8080/api/youtube/trends\");\r\n\r\n        // Yanıtın JSON olup olmadığını kontrol et\r\n        const text = await response.text();\r\n        console.log(\"YouTube API Yanıtı (ham veri):\", text);\r\n\r\n        const data = JSON.parse(text); // JSON'a çevir\r\n        console.log(\"YouTube API Yanıtı (JSON):\", data);\r\n\r\n        if (!Array.isArray(data)) {\r\n            console.error(\"YouTube verileri eksik veya yanlış formatta!\", data);\r\n            return [];\r\n        }\r\n\r\n        return data.map(item => ({\r\n            title: item.title,\r\n            url: item.url,\r\n            thumbnail: item.thumbnail || \"\",\r\n        }));\r\n    } catch (error) {\r\n        console.error(\"YouTube API Hatası:\", error);\r\n        return [];\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const fetchInstagramData = async () => {\r\n    const response = await fetch(\"API_URL_INSTAGRAM\");\r\n    const data = await response.json();\r\n    return data.map(post => ({\r\n        title: post.caption,\r\n        url: post.permalink,\r\n        thumbnail: post.media_url\r\n    }));\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oDAAoD,CAAC;EAClF,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACA,IAAI,CAACE,QAAQ,CAACC,GAAG,CAACC,IAAI,KAAK;IACnCC,KAAK,EAAED,IAAI,CAACJ,IAAI,CAACK,KAAK;IACtBC,GAAG,EAAEF,IAAI,CAACJ,IAAI,CAACM,GAAG;IAClBC,SAAS,EAAEH,IAAI,CAACJ,IAAI,CAACO,SAAS,KAAK,MAAM,GAAGH,IAAI,CAACJ,IAAI,CAACO,SAAS,GAAG;EACtE,CAAC,CAAC,CAAC;AACP,CAAC;AAGD,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,CAAC;EAC/C,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACG,GAAG,CAACM,KAAK,KAAK;IACtBJ,KAAK,EAAEI,KAAK,CAACC,IAAI;IACjBJ,GAAG,EAAE,mCAAmCG,KAAK,CAACE,EAAE,EAAE;IAClDJ,SAAS,EAAEE,KAAK,CAACG,KAAK,GAAGH,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAACN,GAAG,GAAG;EAClD,CAAC,CAAC,CAAC;AACP,CAAC;AAED,OAAO,MAAMO,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACA,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,CAAC;;IAExE;IACA,MAAMW,IAAI,GAAG,MAAMZ,QAAQ,CAACY,IAAI,CAAC,CAAC;IAClCI,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEL,IAAI,CAAC;IAEnD,MAAMV,IAAI,GAAGgB,IAAI,CAACC,KAAK,CAACP,IAAI,CAAC,CAAC,CAAC;IAC/BI,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEf,IAAI,CAAC;IAE/C,IAAI,CAACkB,KAAK,CAACC,OAAO,CAACnB,IAAI,CAAC,EAAE;MACtBc,OAAO,CAACM,KAAK,CAAC,8CAA8C,EAAEpB,IAAI,CAAC;MACnE,OAAO,EAAE;IACb;IAEA,OAAOA,IAAI,CAACG,GAAG,CAACkB,IAAI,KAAK;MACrBhB,KAAK,EAAEgB,IAAI,CAAChB,KAAK;MACjBC,GAAG,EAAEe,IAAI,CAACf,GAAG;MACbC,SAAS,EAAEc,IAAI,CAACd,SAAS,IAAI;IACjC,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,OAAOa,KAAK,EAAE;IACZN,OAAO,CAACM,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,OAAO,EAAE;EACb;AACJ,CAAC;AAQD,OAAO,MAAME,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC1C,MAAMxB,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmB,CAAC;EACjD,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACG,GAAG,CAACC,IAAI,KAAK;IACrBC,KAAK,EAAED,IAAI,CAACmB,OAAO;IACnBjB,GAAG,EAAEF,IAAI,CAACoB,SAAS;IACnBjB,SAAS,EAAEH,IAAI,CAACqB;EACpB,CAAC,CAAC,CAAC;AACP,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}