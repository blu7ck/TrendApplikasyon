{"ast":null,"code":"export const fetchRedditData = async () => {\n  const response = await fetch(\"https://www.reddit.com/r/popular/top.json?limit=10\");\n  const data = await response.json();\n  return data.data.children.map(post => ({\n    title: post.data.title,\n    url: post.data.url,\n    thumbnail: post.data.thumbnail !== \"self\" ? post.data.thumbnail : null\n  }));\n};\nexport const fetchTwitterData = async () => {\n  const response = await fetch(\"API_URL_TWITTER\");\n  const data = await response.json();\n  return data.map(tweet => ({\n    title: tweet.text,\n    url: `https://twitter.com/user/status/${tweet.id}`,\n    thumbnail: tweet.media ? tweet.media[0].url : null\n  }));\n};\nexport const fetchYouTubeData = async () => {\n  try {\n    console.log(\"YouTube verisi çekiliyor...\");\n    const response = await fetch(\"http://localhost:8080/api/youtube/trends\");\n\n    // 1️⃣ HTTP Yanıt Kontrolü (200 değilse hata fırlat)\n    if (!response.ok) {\n      throw new Error(`HTTP hata! Durum kodu: ${response.status}`);\n    }\n\n    // 2️⃣ Yanıtın JSON olup olmadığını kontrol et\n    const contentType = response.headers.get(\"content-type\");\n    if (!contentType || !contentType.includes(\"application/json\")) {\n      throw new Error(\"Sunucudan JSON formatında veri gelmiyor!\");\n    }\n\n    // 3️⃣ JSON Parse İşlemi\n    const data = await response.json();\n    console.log(\"YouTube API Yanıtı:\", data);\n\n    // 4️⃣ Beklenen formatı doğrula\n    if (!Array.isArray(data)) {\n      throw new Error(\"Beklenmeyen veri formatı! API'den gelen veri array değil.\");\n    }\n    return data.map(video => ({\n      title: video.title,\n      url: video.url,\n      thumbnail: video.thumbnail || \"\"\n    }));\n  } catch (error) {\n    console.error(\"YouTube API Hatası:\", error);\n    return [];\n  }\n};\nexport const fetchInstagramData = async () => {\n  const response = await fetch(\"API_URL_INSTAGRAM\");\n  const data = await response.json();\n  return data.map(post => ({\n    title: post.caption,\n    url: post.permalink,\n    thumbnail: post.media_url\n  }));\n};","map":{"version":3,"names":["fetchRedditData","response","fetch","data","json","children","map","post","title","url","thumbnail","fetchTwitterData","tweet","text","id","media","fetchYouTubeData","console","log","ok","Error","status","contentType","headers","get","includes","Array","isArray","video","error","fetchInstagramData","caption","permalink","media_url"],"sources":["C:/Users/blu4c/OneDrive/Desktop/blu4ck/IntelliJ/stuff/TrendApplikasyon/trendapp-ui/src/api.js"],"sourcesContent":["export const fetchRedditData = async () => {\r\n    const response = await fetch(\"https://www.reddit.com/r/popular/top.json?limit=10\");\r\n    const data = await response.json();\r\n    return data.data.children.map(post => ({\r\n        title: post.data.title,\r\n        url: post.data.url,\r\n        thumbnail: post.data.thumbnail !== \"self\" ? post.data.thumbnail : null\r\n    }));\r\n};\r\n\r\n\r\nexport const fetchTwitterData = async () => {\r\n    const response = await fetch(\"API_URL_TWITTER\");\r\n    const data = await response.json();\r\n    return data.map(tweet => ({\r\n        title: tweet.text,\r\n        url: `https://twitter.com/user/status/${tweet.id}`,\r\n        thumbnail: tweet.media ? tweet.media[0].url : null\r\n    }));\r\n};\r\n\r\nexport const fetchYouTubeData = async () => {\r\n    try {\r\n        console.log(\"YouTube verisi çekiliyor...\");\r\n\r\n        const response = await fetch(\"http://localhost:8080/api/youtube/trends\");\r\n\r\n        // 1️⃣ HTTP Yanıt Kontrolü (200 değilse hata fırlat)\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP hata! Durum kodu: ${response.status}`);\r\n        }\r\n\r\n        // 2️⃣ Yanıtın JSON olup olmadığını kontrol et\r\n        const contentType = response.headers.get(\"content-type\");\r\n        if (!contentType || !contentType.includes(\"application/json\")) {\r\n            throw new Error(\"Sunucudan JSON formatında veri gelmiyor!\");\r\n        }\r\n\r\n        // 3️⃣ JSON Parse İşlemi\r\n        const data = await response.json();\r\n        console.log(\"YouTube API Yanıtı:\", data);\r\n\r\n        // 4️⃣ Beklenen formatı doğrula\r\n        if (!Array.isArray(data)) {\r\n            throw new Error(\"Beklenmeyen veri formatı! API'den gelen veri array değil.\");\r\n        }\r\n\r\n        return data.map(video => ({\r\n            title: video.title,\r\n            url: video.url,\r\n            thumbnail: video.thumbnail || \"\",\r\n        }));\r\n\r\n    } catch (error) {\r\n        console.error(\"YouTube API Hatası:\", error);\r\n        return [];\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const fetchInstagramData = async () => {\r\n    const response = await fetch(\"API_URL_INSTAGRAM\");\r\n    const data = await response.json();\r\n    return data.map(post => ({\r\n        title: post.caption,\r\n        url: post.permalink,\r\n        thumbnail: post.media_url\r\n    }));\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}