{"ast":null,"code":"export const fetchRedditData=async()=>{const response=await fetch(\"http://localhost:8080/api/reddit/top\");const data=await response.json();console.log(\"Backend'den gelen veri:\",data);return data.map(post=>({title:post.title,url:post.url,thumbnail:post.thumbnail?post.thumbnail:null}));};// export const fetchTwitterData = async () => {\n//     const response = await fetch(\"API_URL_TWITTER\");\n//     const data = await response.json();\n//     return data.map(tweet => ({\n//         title: tweet.text,\n//         url: `https://twitter.com/user/status/${tweet.id}`,\n//         thumbnail: tweet.media ? tweet.media[0].url : null\n//     }));\n// };\nexport const fetchYouTubeData=async()=>{try{console.log(\"YouTube verisi çekiliyor...\");const response=await fetch(\"http://localhost:8080/api/youtube/trends\");// 1️⃣ HTTP Yanıt Kontrolü (200 değilse hata fırlat)\nif(!response.ok){throw new Error(`HTTP hata! Durum kodu: ${response.status}`);}// 2️⃣ Yanıtın JSON olup olmadığını kontrol et\nconst contentType=response.headers.get(\"content-type\");if(!contentType||!contentType.includes(\"application/json\")){throw new Error(\"Sunucudan JSON formatında veri gelmiyor!\");}// 3️⃣ JSON Parse İşlemi\nconst data=await response.json();console.log(\"YouTube API Yanıtı:\",data);// 4️⃣ Beklenen formatı doğrula\nif(!Array.isArray(data)){throw new Error(\"Beklenmeyen veri formatı! API'den gelen veri array değil.\");}return data.map(video=>({title:video.title,url:video.url,thumbnail:video.thumbnail||\"\"}));}catch(error){console.error(\"YouTube API Hatası:\",error);return[];}};// export const fetchInstagramData = async () => {\n//     const response = await fetch(\"API_URL_INSTAGRAM\");\n//     const data = await response.json();\n//     return data.map(post => ({\n//         title: post.caption,\n//         url: post.permalink,\n//         thumbnail: post.media_url\n//     }));\n// };","map":{"version":3,"names":["fetchRedditData","response","fetch","data","json","console","log","map","post","title","url","thumbnail","fetchYouTubeData","ok","Error","status","contentType","headers","get","includes","Array","isArray","video","error"],"sources":["D:/TrendApplikasyon/frontend/src/api.js"],"sourcesContent":["export const fetchRedditData = async () => {\r\n    const response = await fetch(\"http://localhost:8080/api/reddit/top\");\r\n    const data = await response.json();\r\n    console.log(\"Backend'den gelen veri:\", data); \r\n\r\n    return data.map(post => ({\r\n        title: post.title,\r\n        url: post.url,\r\n        thumbnail: post.thumbnail ? post.thumbnail : null\r\n    }));\r\n};\r\n\r\n\r\n\r\n// export const fetchTwitterData = async () => {\r\n//     const response = await fetch(\"API_URL_TWITTER\");\r\n//     const data = await response.json();\r\n//     return data.map(tweet => ({\r\n//         title: tweet.text,\r\n//         url: `https://twitter.com/user/status/${tweet.id}`,\r\n//         thumbnail: tweet.media ? tweet.media[0].url : null\r\n//     }));\r\n// };\r\n\r\nexport const fetchYouTubeData = async () => {\r\n    try {\r\n        console.log(\"YouTube verisi çekiliyor...\");\r\n\r\n        const response = await fetch(\"http://localhost:8080/api/youtube/trends\");\r\n\r\n        // 1️⃣ HTTP Yanıt Kontrolü (200 değilse hata fırlat)\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP hata! Durum kodu: ${response.status}`);\r\n        }\r\n\r\n        // 2️⃣ Yanıtın JSON olup olmadığını kontrol et\r\n        const contentType = response.headers.get(\"content-type\");\r\n        if (!contentType || !contentType.includes(\"application/json\")) {\r\n            throw new Error(\"Sunucudan JSON formatında veri gelmiyor!\");\r\n        }\r\n\r\n        // 3️⃣ JSON Parse İşlemi\r\n        const data = await response.json();\r\n        console.log(\"YouTube API Yanıtı:\", data);\r\n\r\n        // 4️⃣ Beklenen formatı doğrula\r\n        if (!Array.isArray(data)) {\r\n            throw new Error(\"Beklenmeyen veri formatı! API'den gelen veri array değil.\");\r\n        }\r\n\r\n        return data.map(video => ({\r\n            title: video.title,\r\n            url: video.url,\r\n            thumbnail: video.thumbnail || \"\",\r\n        }));\r\n\r\n    } catch (error) {\r\n        console.error(\"YouTube API Hatası:\", error);\r\n        return [];\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const fetchInstagramData = async () => {\r\n//     const response = await fetch(\"API_URL_INSTAGRAM\");\r\n//     const data = await response.json();\r\n//     return data.map(post => ({\r\n//         title: post.caption,\r\n//         url: post.permalink,\r\n//         thumbnail: post.media_url\r\n//     }));\r\n// };\r\n"],"mappings":"AAAA,MAAO,MAAM,CAAAA,eAAe,CAAG,KAAAA,CAAA,GAAY,CACvC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,sCAAsC,CAAC,CACpE,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAClCC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAEH,IAAI,CAAC,CAE5C,MAAO,CAAAA,IAAI,CAACI,GAAG,CAACC,IAAI,GAAK,CACrBC,KAAK,CAAED,IAAI,CAACC,KAAK,CACjBC,GAAG,CAAEF,IAAI,CAACE,GAAG,CACbC,SAAS,CAAEH,IAAI,CAACG,SAAS,CAAGH,IAAI,CAACG,SAAS,CAAG,IACjD,CAAC,CAAC,CAAC,CACP,CAAC,CAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAO,MAAM,CAAAC,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACxC,GAAI,CACAP,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC,CAE1C,KAAM,CAAAL,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,0CAA0C,CAAC,CAExE;AACA,GAAI,CAACD,QAAQ,CAACY,EAAE,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,0BAA0Bb,QAAQ,CAACc,MAAM,EAAE,CAAC,CAChE,CAEA;AACA,KAAM,CAAAC,WAAW,CAAGf,QAAQ,CAACgB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,CACxD,GAAI,CAACF,WAAW,EAAI,CAACA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,CAAE,CAC3D,KAAM,IAAI,CAAAL,KAAK,CAAC,0CAA0C,CAAC,CAC/D,CAEA;AACA,KAAM,CAAAX,IAAI,CAAG,KAAM,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAClCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAEH,IAAI,CAAC,CAExC;AACA,GAAI,CAACiB,KAAK,CAACC,OAAO,CAAClB,IAAI,CAAC,CAAE,CACtB,KAAM,IAAI,CAAAW,KAAK,CAAC,2DAA2D,CAAC,CAChF,CAEA,MAAO,CAAAX,IAAI,CAACI,GAAG,CAACe,KAAK,GAAK,CACtBb,KAAK,CAAEa,KAAK,CAACb,KAAK,CAClBC,GAAG,CAAEY,KAAK,CAACZ,GAAG,CACdC,SAAS,CAAEW,KAAK,CAACX,SAAS,EAAI,EAClC,CAAC,CAAC,CAAC,CAEP,CAAE,MAAOY,KAAK,CAAE,CACZlB,OAAO,CAACkB,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3C,MAAO,EAAE,CACb,CACJ,CAAC,CAiBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}